#!/bin/bash
set -o pipefail
set -o errexit
set -o nounset
set -o errtrace
shopt -s inherit_errexit

# The pstate only is not sufficient, as in some cases, the temperature doesn't reach acceptable values
# (eg. stays at 20W); it's currently not clear if in those cases, one should just wait more (e.g. 1
# minute), or if a persistenced is really required.
c_target_pstate=P8
c_target_power_draw=15             # Around 11 is optimal, but avoid trying hard (which sometimes just doesn't happen)
c_persistenced_restart_interval=25 # Typically takes between 15 and 20"; 25 are enough to draw the conclusion
c_attempts=4                       # Includes the first; a couple are generally required
c_polling_interval=5               # Seconds between pollings
c_default_sleep=5                  # Used by the service
c_program_name=$(basename "$0")    # Also used as service name
c_config_file=/etc/$c_program_name # The format is described in decode_configuration_file()
c_help="Usage: $c_program_name [-h|--help] [-s|--sleep SECS] nvidia|vfio|list|install [<argument>]

Options:

- '--sleep' : make the program pause before and after running the 'nvidia' switch

Arguments:

- install <guest gpu device> <guest gpu bus id> : device bus id of the gpu, without the function (e.g. '/dev/nvidia1 0000:2d:00')

No other commands use arguments

All the commands (expect 'install') require the configuration file to be present.

Commands help:

## nvidia

Switch the card drivers to nvidia.

Accepts '--sleep', but makes sense only in the context of a running Systemd unit.

## vfio

Switch the card drivers to vfio.

## list

List the drives in use by the second card, and the processes running on it.

## install

Install the Systemd unit to run this program after X starts, and create the configuration file ($c_config_file).

This operation *must* be run while the nvidia drivers are loaded (so that the program can figure out the drivers).

If '--sleep' is not specified, the value is set to $c_default_sleep."

v_mode=                # on/off/list
v_sleep=
v_debug=               # boolean; blank=false, anything else=true
v_guest_gpu_device=    # block device, e.g. /dev/nvidia1
v_guest_gpu_bus_id=    # bus without function, e.g. '0000:2b:00'
v_guest_gpu_drivers=() # reflects the devices order in the bus

t_pstate=
t_power_draw=          # int

################################################################################
# COMMANDLINE DECODING
################################################################################

function decode_cmdline_args {
  local params
  params=$(getopt --options hos:D --long help,other-target,sleep:,debug --name "$(basename "$0")" -- "$@")

  eval set -- "$params"

  while true; do
    case $1 in
      -h|--help)
        echo "$c_help"
        exit 0 ;;
      -s|--sleep)
        v_sleep=$2
        shift 2 ;;
      -D|--debug)
        v_debug=1
        shift ;;
      --)
        shift
        break ;;
    esac
  done

  # The mode check is performed in main()
  #
  v_mode=${1:-}

  case $v_mode in
  install)
    check_args_count $# 3

    v_guest_gpu_device=$2
    v_guest_gpu_bus_id=$3
    v_sleep=${v_sleep:-$c_default_sleep}
    ;;
  *)
    check_args_count $# 1
    ;;
  esac
}

################################################################################
# HELPERS
################################################################################

function check_args_count {
  local actual_count=$1
  local expected_count=$2

  if [[ $actual_count -ne $expected_count ]]; then
    echo "$c_help"
    exit 1
  fi
}

function switch_to_root {
  if [[ $(id -u) -ne 0 ]]; then
    sudo "$0" "$@"
    exit $?
  fi
}

# The configuration file format is:
#
# - first line: guest GPU device
# - second line: bus id (without function)
# - third line: device drivers list (comma separated)
#
function decode_configuration_file {
  v_guest_gpu_device=$(sed '1!d' "$c_config_file")
  v_guest_gpu_bus_id=$(sed '2!d' "$c_config_file")
  mapfile -td, v_guest_gpu_drivers < <(sed '3!d' "$c_config_file")
}

function list_gpu_device_processes {
  local device=$1

  lsof "$device" 2> /dev/null | tail -n+2
}

function switch_driver {
  local bus_id=$1
  local new_driver=$2

  # shellcheck disable=2155 # statement always successful
  local old_driver=$(basename "$(readlink /sys/bus/pci/devices/"$bus_id"/driver || true)")

  if [[ $old_driver != "$new_driver" ]]; then
    # If the device has no driver, there's nothing to unbind.
    #
    if [[ -n $old_driver ]]; then
      echo "$bus_id" > /sys/bus/pci/devices/"$bus_id"/driver/unbind
    fi

    # Without override, an odd error can be raised ("No such device").
    #
    echo "$new_driver" > /sys/bus/pci/devices/"$bus_id"/driver_override

    # There are (at least) two ways of binding a driver to a device, by sending the device bus id:
    #
    # 1. to the `$driver_name/bind` file
    # 2. to `/sys/bus/pci/drivers_probe`
    #
    # The first is used here; the second is used by the `vfio-pci-bind.sh` script mentioned below.
    # An explanation of probing can be found [here](https://stackoverflow.com/a/5069325).
    #
    echo "$bus_id" > /sys/bus/pci/drivers/"$new_driver"/bind
  fi
}

function set_card_data {
  local raw_data
  raw_data=$(nvidia-smi -i "$v_guest_gpu_bus_id".0 --format=csv,noheader --query-gpu=pstate,power.draw)

  t_pstate=${raw_data%,*}
  t_power_draw=$(perl -ne "print /(\d+)\.\d+ W/" <<< "$raw_data")

  if [[ -n $v_debug ]]; then
    >&2 echo "$raw_data/$t_pstate/$t_power_draw"
  fi
}

function target_reached {
  [[ $t_pstate == "$c_target_pstate" && $t_power_draw -le "$c_target_power_draw" ]]
}

################################################################################
# SWITCHERS
################################################################################

function switch_nvidia {
  [[ -n $v_sleep ]] && sleep "$v_sleep"

  decode_configuration_file

  for (( i = 0; i < ${#v_guest_gpu_drivers[@]}; i++ )); do
    local bus_id=$v_guest_gpu_bus_id.$i
    local driver=${v_guest_gpu_drivers[$i]}

    switch_driver "$bus_id" "$driver"
  done

  local message

  for ((attempt=0; attempt < c_attempts; attempt++)); do
    echo "Restarting persistenced ($t_pstate/$t_power_draw)..."

    # This is very important. `nvidia-smi` changes, on execution, /dev/nvidia1 permissions to 666; this
    # allows programs to use the GPU, e.g. Visual Studio Code.
    #
    # Restricting permissions (eg. to 664) after each `nvidia-smi` invocation would be a reasonable solution,
    # but unfortunately it drives the card crazy, making it not going to P8, in addition to causing `nvidia-smi`
    # to return invalid values.
    #
    # Changing the permissions at the points below worked, possibly because nvidia-persistenced writes
    # as `other` user.
    #
    # If the cause if nvidia-persistenced, this can potentially cause a race condition; in such case,
    # the only solution is probably to wait bit before restarting persistenced, although this increases
    # the window of opportunity for other programs to interfere.
    #
    systemctl stop nvidia-persistenced
    chmod 666 "$v_guest_gpu_device"

    systemctl start nvidia-persistenced

    for ((SECONDS=0; SECONDS < c_persistenced_restart_interval; )); do
      chmod 666 "$v_guest_gpu_device"
      set_card_data
      chmod 664 "$v_guest_gpu_device"

      if target_reached; then
        message="State/Power draw reached ($t_pstate/$t_power_draw)!"
        echo "$message"
        notify-send "$message"
        return
      fi

      sleep "$c_polling_interval"
    done
  done

  message="Couldn't reach target state after $c_attempts attempts ($t_pstate/$t_power_draw)."
  >&2 echo "$message"
  notify-send "$message"

  [[ -n $v_sleep ]] && sleep "$v_sleep"
}

# For a more sophisticated approach (using the same strategy), see https://raw.githubusercontent.com/andre-richter/vfio-pci-bind/master/vfio-pci-bind.sh.
#
function switch_vfio {
  decode_configuration_file

  local guest_gpu_processes
  guest_gpu_processes=$(list_gpu_device_processes "$v_guest_gpu_device" | grep -v nvidia-persistenced || true)

  # This can actually happen if the nvidia driver if one restarts X. In order to avoid that, a switch
  # to vfio service should be run on lightdm shutdown.
  #
  if [[ -n $guest_gpu_processes ]]; then
    echo "$guest_gpu_processes"
    >&2 echo "Found processes (other than persistenced) running on the guest device!"
    exit 1
  fi

  systemctl stop nvidia-persistenced

  for (( i = 0; i < ${#v_guest_gpu_drivers[@]}; i++ )); do
    local bus_id=$v_guest_gpu_bus_id.$i
    switch_driver "$bus_id" vfio-pci
  done

  # This has no access at this stage to the vfio card, so no need to set the permissions.

  systemctl start nvidia-persistenced
}

# The processlist is very important! See permissions not in switch_nvidia().
#
function list {
  decode_configuration_file

  local pattern=${v_guest_gpu_bus_id:5}

  lspci -v | grep -P '^\w\w:\w\w|in use' | perl -ne "if (/^$pattern/) { print; print scalar(readline) }"

  echo

  list_gpu_device_processes "$v_guest_gpu_device" | awk '{print $NF,$0}' | sort | cut -f2- -d' '
}

# See note on switch_vfio() about lightdm restart side effect.
#
function install {
  echo "$v_guest_gpu_device" > "$c_config_file"
  echo "$v_guest_gpu_bus_id" >> "$c_config_file"

  local driver

  for device_path in "/sys/bus/pci/devices/$v_guest_gpu_bus_id".*; do
    if [[ $device_path != *.0 ]]; then
      echo -n "," >> "$c_config_file"
    fi

    # We expect each device to be bound to a driver
    #
    driver=$(basename "$(readlink "$device_path"/driver)")

    echo -n "$driver" >> "$c_config_file"
  done

  echo "Generated configuration:"
  echo
  cat "$c_config_file"
  echo $'\n'

  # For simplicity, a few assumptions are applied (standard home, no need to quote, ...).
  #
  SYSTEMD_EDITOR="tee" systemctl edit --force --full "$c_program_name" << UNIT
[Unit]
Description=Switch GPU1 driver to nvidia
After=lightdm.target

[Service]
Type=oneshot
# We need to wait a bit after start, otherwise, X hangs
ExecStart=$0 --sleep $v_sleep nvidia $v_guest_gpu_device $v_guest_gpu_bus_id

StandardOutput=syslog
StandardError=syslog

Environment="DISPLAY=:0" "XAUTHORITY=/home/$SUDO_USER/.Xauthority"

[Install]
WantedBy=multi-user.target
UNIT
  systemctl enable "$c_program_name"

  echo "Service installed and enabled, with a sleep time of $v_sleep"
}

################################################################################
# MAIN
################################################################################

function main {
  # When adding a new command, update the help!
  #
  case $v_mode in
  nvidia)
    switch_nvidia
    ;;
  vfio)
    switch_vfio
    ;;
  list)
    list
    ;;
  install)
    install
    ;;
  *)
    >&2 echo "Invalid command: $v_mode; see help."
    exit 1
  esac
}

decode_cmdline_args "$@"
switch_to_root "$@"
main
